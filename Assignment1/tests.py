import random

from nearest_neighbour import learnknn, predictknn, gensmallm
import numpy as np
import matplotlib.pyplot as plt

# k = 1
# x_train = np.array([[1, 2], [3, 4], [5, 6]])
# y_train = np.array([1, 0, 1])
# classifier = learnknn(k, x_train, y_train)
# x_test = np.array([[10,11], [3.1,4.2], [2.9,4.2], [5,6]])
# y_testprediction = predictknn(classifier, x_test)
# print(y_testprediction)

# sample_sizes = [random.randint(1, 100) for _ in range(10)]
# errors = {size: [[], 0] for size in sample_sizes}
# for size in sample_sizes:
#     for _ in range(10):
#         data = np.load('mnist_all.npz')
#
#         train0 = data['train0']
#         train1 = data['train1']
#         train2 = data['train2']
#         train3 = data['train3']
#
#         test0 = data['test0']
#         test1 = data['test1']
#         test2 = data['test2']
#         test3 = data['test3']
#
#         x_train, y_train = gensmallm([train0, train1, train2, train3], [0, 1, 2, 3], size)
#
#         x_test, y_test = gensmallm([test0, test1, test2, test3], [0, 1, 2, 3], size)
#
#         classifer = learnknn(1, x_train, y_train)
#
#         preds = predictknn(classifer, x_test)
#         errors[size][0].append(np.mean(preds != y_test))
#     print(f"Size {size} done")
#     errors[size][1] = np.mean(errors[size][0])
#
# print(errors)

errors = {44: [[0.734504132231405, 0.7360537190082644, 0.7128099173553719, 0.7453512396694215, 0.734504132231405, 0.7355371900826446, 0.7386363636363636, 0.746900826446281, 0.7355371900826446, 0.7329545454545454], 0.7352789256198348], 87: [[0.7447483154974237, 0.7480512617254591, 0.7460694939886379, 0.7497687937640375, 0.7369533623992601, 0.751486325802616, 0.7469943189324878, 0.7298189985467036, 0.7506936187078874, 0.7459373761395165], 0.745052186550403], 9: [[0.7160493827160493, 0.6172839506172839, 0.7407407407407407, 0.7407407407407407, 0.6296296296296297, 0.7901234567901234, 0.691358024691358, 0.691358024691358, 0.7530864197530864, 0.6790123456790124], 0.7049382716049383], 93: [[0.7441322696265464, 0.7315296566077003, 0.7455197132616488, 0.7491039426523297, 0.7370794311481096, 0.7507226268932825, 0.7326858596369522, 0.7460978147762747, 0.7021620996647011, 0.7417042432651173], 0.7380737657532663], 53: [[0.7390530437878249, 0.7404770380918476, 0.7422570309718761, 0.7472410110359559, 0.7419010323958705, 0.7472410110359559, 0.7123531505873977, 0.7198291206835172, 0.7362050551797793, 0.7515129939480242], 0.7378070487718049], 58: [[0.7502972651605232, 0.7360285374554102, 0.7407847800237812, 0.7428656361474435, 0.7494054696789536, 0.748513674197384, 0.7259215219976218, 0.7434601664684899, 0.724435196195006, 0.7494054696789536], 0.7411117717003567], 13: [[0.7514792899408284, 0.7100591715976331, 0.7041420118343196, 0.6923076923076923, 0.6568047337278107, 0.5680473372781065, 0.6745562130177515, 0.7396449704142012, 0.7337278106508875, 0.7396449704142012], 0.6970414201183432], 8: [[0.703125, 0.65625, 0.375, 0.8125, 0.625, 0.65625, 0.71875, 0.703125, 0.65625, 0.75], 0.665625], 1: [[1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], 0.7], 24: [[0.7291666666666666, 0.7152777777777778, 0.7378472222222222, 0.7013888888888888, 0.71875, 0.7378472222222222, 0.75, 0.6857638888888888, 0.6579861111111112, 0.6423611111111112], 0.7076388888888887]}


plt.plot(errors.keys(), [errors[size][1] for size in errors.keys()])

plt.show()